<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sql on LHR</title>
    <link>https://chinalhr.github.io/tags/sql/</link>
    <description>Recent content in Sql on LHR</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 Jul 2018 23:37:55 +0800</lastBuildDate>
    
	<atom:link href="https://chinalhr.github.io/tags/sql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MySql大数据量表分页</title>
      <link>https://chinalhr.github.io/post/mysql_paging/</link>
      <pubDate>Thu, 19 Jul 2018 23:37:55 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/mysql_paging/</guid>
      <description>Limit不适用于大数量表的分页查询 select * from table limit 3000000,10; //mysql会读取300w+10条数据，再取最后的10条数据  大数据量表的分页方式 方式一  不允许查看靠后的数据,例如百度  方式二  使用id进行分页操作，在查询下一页时把上一页的最后一个id传给服务器(客户端无页码分页查询)
select * from table where id&amp;gt;lastid limit 10;
 针对自增的id并且中间没有删除和断点
select * from table where id&amp;gt;420*10 limit 10; //查询第420页的数据
  方式三  延迟关联，利用对id进行limit查询有索引的优势，先查询对应分页的id值再对查询的id进行关联查询
SELECT d.* FROM dynamic d INNER JOIN (SELECT id FROM dynamic LIMIT 100000,10) tem on d.id = tem.id
 </description>
    </item>
    
    <item>
      <title>Mysql对存有大数据表进行结构修改需要注意的问题</title>
      <link>https://chinalhr.github.io/post/mysql_alter/</link>
      <pubDate>Sun, 08 Jul 2018 17:56:21 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/mysql_alter/</guid>
      <description>MySql对大数据表进行alter操作导致的问题 Mysql执行DDL直接修改表结构的过程中可能会锁表，导致无法写数据，出现生产事故。
MySql各版本执行DDL方式  Copy Table(5.5之前)：通过临时表拷贝的方式实现的:新建一个带有新结构的临时表，将原表数据全部拷贝到临时表，然后Rename。【过程原表可读不可写】 Inplace(5.5)：直接在原表上执行DDL，但仅支持添加、删除索引两种方式。【过程原表可读不可写】 Online(5.6)：通过全量+增量的方式实现，直接在原表上执行DDL。  【如添加普通列|不存在全文索引时可读可写】 【修改列类型DDL|添加auto_increment列|修改字符集|存在全文索引时可读不可写】 【存在慢SQL或者较大的结果集的SQL在运行|存在一个事务在操作表可读不可写】   详细参见： https://www.cnblogs.com/mysql-dba/p/6192897.html http://www.cnblogs.com/cchust/p/4639397.html
方案1：创建新表进行alter并复制数据 [选择在凌晨3-4时更新]
 首先创建新的临时表，表结构通过命令ALTAR TABLE新定义的结构,索引 然后把原表中数据导入到临时表  记录最后一条更新数据的索引,统计更新数量 使用脚本对之前的数据进行小数据批量分批复制到临时表（走task或者脚本，记得复制id） 更新完成,对之前更新数据索引后增加的数据进行复制(transaction)  删除原表 最后把临时表重命名为原来的表名  方案2：新建一个表与旧表进行字段关联 略&amp;hellip;
注意点 如果项目使用了Hibernate，需要关闭hibernate ddl(删掉hibernate.hbm2ddl.auto)。hibernate.cfg.xml 中hibernate.hbm2ddl.auto配置节点：
&amp;lt;property name=&amp;quot;hibernate.hbm2ddl.auto&amp;quot; value=&amp;quot;create&amp;quot; /&amp;gt;   hibernate.hbm2ddl.auto参数的作用主要用于：自动创建|更新|验证数据库表结构
 create   每次加载hibernate时都会删除上一次的生成的表，然后根据你的model类再重新来生成新表
 create-drop  每次加载hibernate时根据model类生成表，但是sessionFactory一关闭,表就自动删除。
 update  第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库），以后加载hibernate时根据 model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。
 validate  每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。
 </description>
    </item>
    
    <item>
      <title>MySql读写分离</title>
      <link>https://chinalhr.github.io/post/mysql_replicationon/</link>
      <pubDate>Wed, 27 Jun 2018 15:55:01 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/mysql_replicationon/</guid>
      <description>关于 读写分离，基本的原理是让主数据库处理事务性增、改、删操作（INSERT、UPDATE、DELETE），而从数据库处理SELECT查询操作。数据库复制被用来把事务性操作导致的变更同步到集群中的从数据库。
原因 避免对数据库的写入影响了查询的效率。
场景 如果程序使用数据库较多时，而更新少，查询多的情况下会考虑使用，利用数据库 主从同步 。可以减少数据库压力，提高性能。
读写分离与主从复制的关系 通过对数据库进行主从复制的方式来同步数据，实现对主数据进行写操作，对从数据库进行读操作，达到读写分离的目的。
实现 读写分离就是在主服务器上修改，数据会同步到从服务器，从服务器只能提供读取数据，不能写入，实现备份的同时也实现了数据库性能的优化，以及提升了服务器安全。
 基于程序代码内部控制,在代码中根据select 、insert进行路由分类 基于中间代理层实现,代理数据库服务器接收到应用服务器的请求后根据判断后转发到后端数据库(mysql_proxy|Atlas|Amoeba)   </description>
    </item>
    
    <item>
      <title>Mysql主从复制</title>
      <link>https://chinalhr.github.io/post/mysql_proxy/</link>
      <pubDate>Wed, 27 Jun 2018 15:54:50 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/mysql_proxy/</guid>
      <description>解决的问题  数据分布 负载均衡 备份|故障切换  复制工作原理  从主库上把数据更新到二进制日志(Binary Log)中。 备库将主库上的日志复制到自己的中继日志(Relay Log)中。 备库读取中继日志中的事件，重放到备库数据之上。    架构优点:实现了获取事件和重放事件的解耦，两个过程异步执行，I/O线程能够独立于SQL线程之外工作。
mysql支持的复制类型  基于语句的复制(在服务器上执行sql语句，在从服务器上执行同样的语句)[Default] 基于行的复制(把改变的内容复制过去) 混合类型的复制(默认采用基于语句的复制，一旦发现基于语句无法精确复制时，就会采用基于行的复制)  复制用到的文件  二进制日志文件，中继日志文件 mysql-bin.index:用于记录磁盘上的二进制日志文件的文件名 mysql-relay-bin-index：用于记录磁盘上的中继日志文件的文件名 master.info:保存备库连接到主库所需要的信息 relay-log.info:保存当前备库复制的二进制日志和中继日志坐标  配置步骤  在每台服务器上创建复制账号 配置主库和备库 通知备库连接到主库并从主库复制数据  让备库变成其他服务器的主库 log_slave_updates选项可以让备库变成其他服务器的主库  复制拓扑  一主库多备库
一台主库对应堕胎备库 适用场景：少量写，大量读。
 主-主复制(主动模式)
两台服务器，每一台都配置成对方的主库和备库。 适用场景：特殊目的，需要双写场景，会产生冲突。
 主-主复制(被动模式)
两台服务器，每一台都配置成对方的主库和备库，配置其中一台为只读的被动服务器。 解决了主-主复制冲突的问题
 拥有备库的主-主复制
 环形复制
三个或者更多的主库，每个服务器都是他之前的服务器的备库，之后的服务器的主库。
 </description>
    </item>
    
  </channel>
</rss>