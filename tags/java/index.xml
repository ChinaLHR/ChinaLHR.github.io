<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on LHR</title>
    <link>https://chinalhr.github.io/tags/java/</link>
    <description>Recent content in Java on LHR</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 24 Sep 2018 15:56:35 +0800</lastBuildDate>
    
	<atom:link href="https://chinalhr.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spring Aop</title>
      <link>https://chinalhr.github.io/tags/spring_aop/</link>
      <pubDate>Mon, 24 Sep 2018 15:56:35 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/tags/spring_aop/</guid>
      <description> Joinpoint（连接点） 连接点是指那些被拦截到的点。在 Spring 中,这些点指的是方法,因为 Spring 只支持方法类型的连接点。
Pointcut(切入点) 所谓切入点是指我们要对哪些 Joinpoint 进行拦截的定义。 PointCut 依赖了ClassFilter和MethodMatcher,ClassFilter用来指定特定的类，MethodMatcher 指定特定的函数,能实现函数级别的AOP。
 MethodMatcher 两个实现类  StaticMethodMatcher：不在运行时检测参数 DynamicMethodMatcher：DynamicMethodMatcher要在运行时实时检测参数   Advice（通知/增强） 通知是指拦截到 Joinpoint 之后所要做的事情就是通知。通知分为【前置通知】, 【后置通知】,【异常通知】,【最终通知】, 【环绕通知】(切面要完成的功能) * per-class类型的Advice（可以在目标对象类的所有实例之间共享，通常只提供方法拦截功能，不会对目标对象保存任何状态或添加新功能）
 per-instance类型的Advice（不会在目标类所有实例之间共享，而是会为不同的实例对象保存他们各自的状态以及相关逻辑）Introduction可以在不改变目标类的定义的情况下，为对象添加新的属性与行为  Advisor/Aspect(切面) Advisor/Aspect是切入点和通知（引介）的结合。 * Spring AOP的PointcutAdvisor AbstractPointcutAdvisor 实现了Ordered,为多个Advice指定顺序，顺序为Int类型，越小优先级越高, AbstractGenericPointcutAdvisor 指定了Advice，除了Introduction之外的类型 Proxy(代理) 一个类被 AOP 织入增强后，就产生一个结果代理类。 * ProxyConfig
private boolean proxyTargetClass = false;//true,使用CGLIB,false,使用原生 private boolean optimize = false;//是否进行优化 boolean opaque = false;//是否强制转化为advised boolean exposeProxy = false;//AOP生成对象时，绑定到ThreadLocal, 可以通过AopContext获取 private boolean frozen = false;//代理信息一旦设置，是否允许改变   ProxyFactory ProxyFactory是Spring的AOP织入器，接受Pointcut/Advice返回织入了横切逻辑的目标对象代理。 ProxyFactoryBean 本质上是一个用来生产Proxy的FactoryBean，AOP与IOC的融合。 （如果容器中某个对象依赖于ProxyFactoryBean ，他将会使用到ProxyFactoryBean的getObject()方法返回的内容）  </description>
    </item>
    
    <item>
      <title>Shrio导致SpringCache缓存失效原因分析</title>
      <link>https://chinalhr.github.io/tags/springcache_shrio_bug/</link>
      <pubDate>Sat, 22 Sep 2018 23:10:00 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/tags/springcache_shrio_bug/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>FindBug错误修改指南</title>
      <link>https://chinalhr.github.io/tags/findbugs/</link>
      <pubDate>Tue, 21 Aug 2018 21:08:18 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/tags/findbugs/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>阿里支付与微信支付</title>
      <link>https://chinalhr.github.io/tags/alipayandwxpay/</link>
      <pubDate>Sun, 12 Aug 2018 22:05:10 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/tags/alipayandwxpay/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java在Stream中异常处理问题</title>
      <link>https://chinalhr.github.io/tags/java_lambda_exception/</link>
      <pubDate>Wed, 25 Jul 2018 23:20:01 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/tags/java_lambda_exception/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RedisTemplate问题</title>
      <link>https://chinalhr.github.io/tags/redistemplate_problem/</link>
      <pubDate>Fri, 13 Jul 2018 22:17:22 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/tags/redistemplate_problem/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>函数式接口-Supplier|Predicate|Consumer|Function</title>
      <link>https://chinalhr.github.io/tags/java_supplier_predicate_consumer/</link>
      <pubDate>Wed, 11 Jul 2018 21:19:59 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/tags/java_supplier_predicate_consumer/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java项目中的系统结构分层</title>
      <link>https://chinalhr.github.io/tags/java_system_structure/</link>
      <pubDate>Mon, 25 Jun 2018 12:07:03 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/tags/java_system_structure/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Spring Boot组件-Retry|Scheduled</title>
      <link>https://chinalhr.github.io/tags/java_springboot_component1/</link>
      <pubDate>Sun, 24 Jun 2018 20:53:59 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/tags/java_springboot_component1/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>基于SSM项目的个人编码规范</title>
      <link>https://chinalhr.github.io/tags/java_practice/</link>
      <pubDate>Mon, 19 Feb 2018 14:31:45 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/tags/java_practice/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;仅记录一个多月野蛮生长过程的个人编码规范&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java异步编程-CompletableFuture</title>
      <link>https://chinalhr.github.io/tags/java_completablefuture/</link>
      <pubDate>Fri, 02 Feb 2018 00:42:49 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/tags/java_completablefuture/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>