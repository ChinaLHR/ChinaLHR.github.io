<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on LHR</title>
    <link>https://chinalhr.github.io/tags/java/</link>
    <description>Recent content in Java on LHR</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 12 Nov 2018 22:51:04 +0800</lastBuildDate>
    
	<atom:link href="https://chinalhr.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mybatis自定义分表Plug</title>
      <link>https://chinalhr.github.io/post/mybatisshardplug/</link>
      <pubDate>Mon, 12 Nov 2018 22:51:04 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/mybatisshardplug/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;工作中需要用到MyBatis进行分表操作，简单记录实现过程&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Mybatis动态表名：# 与 $ 区别</title>
      <link>https://chinalhr.github.io/post/mybatis_sql_precompile/</link>
      <pubDate>Mon, 12 Nov 2018 21:30:50 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/mybatis_sql_precompile/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;学习Mybatis# 与 $ 机制&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>高可用的HttpClient</title>
      <link>https://chinalhr.github.io/post/highavailabilityhttpclient/</link>
      <pubDate>Wed, 17 Oct 2018 22:48:08 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/highavailabilityhttpclient/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;对HttpClient的优化，基于HttpClient4.4+的连接池(PoolingHttpClientConnectionManager) 使其在高QPS，并发请求下提高效率。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Joda DateTime记录</title>
      <link>https://chinalhr.github.io/post/joda_datetime_record/</link>
      <pubDate>Thu, 04 Oct 2018 23:40:13 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/joda_datetime_record/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;用来记录joda DateTime工具类使用&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Spring Aop分析</title>
      <link>https://chinalhr.github.io/post/spring_aop/</link>
      <pubDate>Mon, 24 Sep 2018 15:56:35 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/spring_aop/</guid>
      <description>&lt;blockquote&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Shrio导致SpringCache缓存失效原因分析</title>
      <link>https://chinalhr.github.io/post/springcache_shrio_bug/</link>
      <pubDate>Sat, 22 Sep 2018 23:10:00 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/springcache_shrio_bug/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;记录Shrio与SpringCache使用过程遇到的问题&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>FindBug错误修改指南</title>
      <link>https://chinalhr.github.io/post/findbugs/</link>
      <pubDate>Tue, 21 Aug 2018 21:08:18 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/findbugs/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;转载&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>阿里支付与微信支付</title>
      <link>https://chinalhr.github.io/post/alipayandwxpay/</link>
      <pubDate>Sun, 12 Aug 2018 22:05:10 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/alipayandwxpay/</guid>
      <description>&lt;blockquote&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Java在Stream中异常处理问题</title>
      <link>https://chinalhr.github.io/post/java_lambda_exception/</link>
      <pubDate>Wed, 25 Jul 2018 23:20:01 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/java_lambda_exception/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Java Lamdba Api缺陷&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>RedisTemplate问题</title>
      <link>https://chinalhr.github.io/post/redistemplate_problem/</link>
      <pubDate>Fri, 13 Jul 2018 22:17:22 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/redistemplate_problem/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;记录RedisTemplate使用过程的问题&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>函数式接口-Supplier|Predicate|Consumer|Function</title>
      <link>https://chinalhr.github.io/post/java_supplier_predicate_consumer/</link>
      <pubDate>Wed, 11 Jul 2018 21:19:59 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/java_supplier_predicate_consumer/</guid>
      <description>&lt;blockquote&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Java项目中的系统结构分层</title>
      <link>https://chinalhr.github.io/post/java_system_structure/</link>
      <pubDate>Mon, 25 Jun 2018 12:07:03 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/java_system_structure/</guid>
      <description>&lt;blockquote&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Spring Boot组件-Retry|Scheduled</title>
      <link>https://chinalhr.github.io/post/java_springboot_component1/</link>
      <pubDate>Sun, 24 Jun 2018 20:53:59 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/java_springboot_component1/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Spring Retry与Scheduled使用记录&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>基于SSM项目的个人编码规范</title>
      <link>https://chinalhr.github.io/post/java_practice/</link>
      <pubDate>Mon, 19 Feb 2018 14:31:45 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/java_practice/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;仅记录一个多月野蛮生长过程的个人编码规范&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Java异步编程-CompletableFuture</title>
      <link>https://chinalhr.github.io/post/java_completablefuture/</link>
      <pubDate>Fri, 02 Feb 2018 00:42:49 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/java_completablefuture/</guid>
      <description>学习CompletableFuture
 异步编程优势 异步对应的是并发，目的在于避免等待远程服务的返回等操作阻塞线程的执行 充分利用单核CPU的性能，意在单个CPU上执行几个松耦合的任务  Future接口 设计 Future设计是某一时刻会发生的结果进行建模，调用一个函数方法的时候，可以让被调用者立即返回， 然后再后台慢慢处理这个请求。对于调用者来说,则可以先处理一些其他任务，在真正需要获取数据的场合再去尝试获取需要的数据  Future接口局限性 使用Future接口很难表述Future结果之间的依赖性，例如Future的组合计算，通知合并等... CompletableFuture利用Lambda表达式以声明式的API提供了一种机制，能够用最有效的方式，非常容易地将多个以同步或异步方式执行复杂操作的任务结合到一起。  使用CompletableFuture构建组合式异步应用 基本操作 public class Shop { private String shopName; public Shop(String shopName) { this.shopName = shopName; } public String getShopName() { return shopName; } public void setShopName(String shopName) { this.shopName = shopName; } /** * 实时价格查看：同步 * @param product * @return */ public Double getPrice(String product){ return calculatePrice(product); } /** * 实时价格查看：异步 * @param product * @return */ public Future&amp;lt;Double&amp;gt; getPriceAsync(String product){ CompletableFuture&amp;lt;Double&amp;gt; futurePrice = new CompletableFuture&amp;lt;&amp;gt;(); //在异步线程中进行计算 new Thread(()-&amp;gt;{ try { double price = calculatePrice(product); futurePrice.</description>
    </item>
    
  </channel>
</rss>