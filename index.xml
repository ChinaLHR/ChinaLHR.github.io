<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LHR</title>
    <link>https://chinalhr.github.io/</link>
    <description>Recent content on LHR</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 15 Nov 2018 22:30:30 +0800</lastBuildDate>
    
	<atom:link href="https://chinalhr.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>操作系统-进程</title>
      <link>https://chinalhr.github.io/post/osheartprocess/</link>
      <pubDate>Thu, 15 Nov 2018 22:30:30 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/osheartprocess/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;读《计算机的心智》,另一个角度看操作系统&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Mybatis自定义分表Plug</title>
      <link>https://chinalhr.github.io/post/mybatisshardplug/</link>
      <pubDate>Mon, 12 Nov 2018 22:51:04 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/mybatisshardplug/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;工作中需要用到MyBatis进行分表操作，简单记录实现过程&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Mybatis动态表名：# 与 $ 区别</title>
      <link>https://chinalhr.github.io/post/mybatis_sql_precompile/</link>
      <pubDate>Mon, 12 Nov 2018 21:30:50 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/mybatis_sql_precompile/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;学习Mybatis# 与 $ 机制&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>编码技巧：防御性编程|表驱动法</title>
      <link>https://chinalhr.github.io/post/codeoptimize1/</link>
      <pubDate>Sat, 03 Nov 2018 21:44:31 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/codeoptimize1/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;读&amp;lt;代码大全&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>高可用的HttpClient</title>
      <link>https://chinalhr.github.io/post/highavailabilityhttpclient/</link>
      <pubDate>Wed, 17 Oct 2018 22:48:08 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/highavailabilityhttpclient/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;对HttpClient的优化，基于HttpClient4.4+的连接池(PoolingHttpClientConnectionManager) 使其在高QPS，并发请求下提高效率。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Joda DateTime记录</title>
      <link>https://chinalhr.github.io/post/joda_datetime_record/</link>
      <pubDate>Thu, 04 Oct 2018 23:40:13 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/joda_datetime_record/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;用来记录joda DateTime工具类使用&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Spring Aop分析</title>
      <link>https://chinalhr.github.io/post/spring_aop/</link>
      <pubDate>Mon, 24 Sep 2018 15:56:35 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/spring_aop/</guid>
      <description>&lt;blockquote&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Shrio导致SpringCache缓存失效原因分析</title>
      <link>https://chinalhr.github.io/post/springcache_shrio_bug/</link>
      <pubDate>Sat, 22 Sep 2018 23:10:00 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/springcache_shrio_bug/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;记录Shrio与SpringCache使用过程遇到的问题&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>使用Apache ab进行压力测试</title>
      <link>https://chinalhr.github.io/post/apache_ab_use/</link>
      <pubDate>Sun, 16 Sep 2018 23:07:30 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/apache_ab_use/</guid>
      <description> 学习Apache ab进行压力测试
 术语  吞吐率：单位是reqs/s，指的是某个并发用户数下单位时间内处理的请求数 并发连接数:服务器一个会话所接受的请求数目。 用户平均请求等待时间：处理完成所有请求数所花费的时间/ （总请求数 / 并发用户数） 服务器平均请求等待时间:处理完成所有请求数所花费的时间 / 总请求数  正常情况下主要关注吞吐量与用户平均请求等待时间。
使用 apache ab是apache服务器所携带的压力测试工具。
压力测试 QPS:50/s 请求数：10000(－n表示请求数，－c表示并发数)
ab -n 10000 -c 50 http:....  结果分析 </description>
    </item>
    
    <item>
      <title>基于SnowFlake的分布式UID生成服务</title>
      <link>https://chinalhr.github.io/post/uidgenerateserver/</link>
      <pubDate>Sat, 08 Sep 2018 23:02:55 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/uidgenerateserver/</guid>
      <description>&lt;blockquote&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>FindBug错误修改指南</title>
      <link>https://chinalhr.github.io/post/findbugs/</link>
      <pubDate>Tue, 21 Aug 2018 21:08:18 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/findbugs/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;转载&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>阿里支付与微信支付</title>
      <link>https://chinalhr.github.io/post/alipayandwxpay/</link>
      <pubDate>Sun, 12 Aug 2018 22:05:10 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/alipayandwxpay/</guid>
      <description>&lt;blockquote&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Java在Stream中异常处理问题</title>
      <link>https://chinalhr.github.io/post/java_lambda_exception/</link>
      <pubDate>Wed, 25 Jul 2018 23:20:01 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/java_lambda_exception/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Java Lamdba Api缺陷&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>MySql大数据量表分页</title>
      <link>https://chinalhr.github.io/post/mysql_paging/</link>
      <pubDate>Thu, 19 Jul 2018 23:37:55 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/mysql_paging/</guid>
      <description>&lt;blockquote&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>分布式锁实现(基于Redis|Zookeeper)</title>
      <link>https://chinalhr.github.io/post/distributedlocks/</link>
      <pubDate>Sun, 15 Jul 2018 18:38:26 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/distributedlocks/</guid>
      <description> 学习分布式锁实现
 分布式锁  关于： 当多个进程(集群)不在同一个系统中，用分布式锁控制多个进程对资源的访问 分布式锁对比线程锁：线程锁可以利用共享堆内存标记存储位置达到目的；分布式锁因为进程不在同一台机器上，需要采取对所有进程可见的中间件标记存储位置达到目的 问题：需要考虑锁对所有进程可见，锁与进程间网络问题 实现：基于数据库，缓存，分布式协调中间件(Zookeeper|Chubby)  设计  可以保证在分布式部署的应用集群中，同一个方法在同一时间只能被一台机器上的一个线程执行 设计为可重入锁，避免死锁 阻塞与非阻塞获取锁方式  基于Redis实现  思路  加锁： 使用set命令(key，value，time，NX) 释放锁:使用del(key)  问题  线程a执行时间超过锁wait时间，导致锁自动释放，①线程b获取了锁和线程a并发访问代码块，②线程a执行结束释放了线程b的锁：  ①避免并发问题：给获取锁的线程开启一个守护线程，给快超时的锁增加wait时间 ②避免锁误删：加锁的时候把当前的线程ID当做value，并在删除之前验证key对应的value是不是自己线程的ID(使用lua脚本确保判断和释放锁的原子性)    基于Zookeeper实现</description>
    </item>
    
    <item>
      <title>RedisTemplate问题</title>
      <link>https://chinalhr.github.io/post/redistemplate_problem/</link>
      <pubDate>Fri, 13 Jul 2018 22:17:22 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/redistemplate_problem/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;记录RedisTemplate使用过程的问题&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>函数式接口-Supplier|Predicate|Consumer|Function</title>
      <link>https://chinalhr.github.io/post/java_supplier_predicate_consumer/</link>
      <pubDate>Wed, 11 Jul 2018 21:19:59 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/java_supplier_predicate_consumer/</guid>
      <description>&lt;blockquote&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>消息队列QPS优化(使用Redis做MQ的Buff)</title>
      <link>https://chinalhr.github.io/post/redisdomqbuff/</link>
      <pubDate>Tue, 10 Jul 2018 22:01:41 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/redisdomqbuff/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;使用Redis做阿里MQ发送的缓存，一种控制QPS的方案&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Jenkins部署优化与发布优化</title>
      <link>https://chinalhr.github.io/post/jenkins_job_optimize/</link>
      <pubDate>Mon, 09 Jul 2018 21:24:11 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/jenkins_job_optimize/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Jenkins是基于Java开发的一种持续集成工具,是一款自动化运维的工具。可用于软件构建自动化，构建可持续的自动化检查，构建可持续的自动化测试&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Mysql对存有大数据表进行结构修改需要注意的问题</title>
      <link>https://chinalhr.github.io/post/mysql_alter/</link>
      <pubDate>Sun, 08 Jul 2018 17:56:21 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/mysql_alter/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;记录生产中遇到的问题&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Git记录</title>
      <link>https://chinalhr.github.io/post/git_basic/</link>
      <pubDate>Sun, 08 Jul 2018 15:49:09 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/git_basic/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;记录Git操作&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>MySql读写分离</title>
      <link>https://chinalhr.github.io/post/mysql_replicationon/</link>
      <pubDate>Wed, 27 Jun 2018 15:55:01 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/mysql_replicationon/</guid>
      <description>&lt;blockquote&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Mysql主从复制</title>
      <link>https://chinalhr.github.io/post/mysql_proxy/</link>
      <pubDate>Wed, 27 Jun 2018 15:54:50 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/mysql_proxy/</guid>
      <description>&lt;blockquote&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>使用RabbitMQ</title>
      <link>https://chinalhr.github.io/post/rabbitmq_use/</link>
      <pubDate>Tue, 26 Jun 2018 21:44:54 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/rabbitmq_use/</guid>
      <description>&lt;blockquote&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Java项目中的系统结构分层</title>
      <link>https://chinalhr.github.io/post/java_system_structure/</link>
      <pubDate>Mon, 25 Jun 2018 12:07:03 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/java_system_structure/</guid>
      <description>&lt;blockquote&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Spring Boot组件-Retry|Scheduled</title>
      <link>https://chinalhr.github.io/post/java_springboot_component1/</link>
      <pubDate>Sun, 24 Jun 2018 20:53:59 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/java_springboot_component1/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Spring Retry与Scheduled使用记录&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>基于SSM项目的个人编码规范</title>
      <link>https://chinalhr.github.io/post/java_practice/</link>
      <pubDate>Mon, 19 Feb 2018 14:31:45 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/java_practice/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;仅记录一个多月野蛮生长过程的个人编码规范&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Java异步编程-CompletableFuture</title>
      <link>https://chinalhr.github.io/post/java_completablefuture/</link>
      <pubDate>Fri, 02 Feb 2018 00:42:49 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/java_completablefuture/</guid>
      <description>学习CompletableFuture
 异步编程优势 异步对应的是并发，目的在于避免等待远程服务的返回等操作阻塞线程的执行 充分利用单核CPU的性能，意在单个CPU上执行几个松耦合的任务  Future接口 设计 Future设计是某一时刻会发生的结果进行建模，调用一个函数方法的时候，可以让被调用者立即返回， 然后再后台慢慢处理这个请求。对于调用者来说,则可以先处理一些其他任务，在真正需要获取数据的场合再去尝试获取需要的数据  Future接口局限性 使用Future接口很难表述Future结果之间的依赖性，例如Future的组合计算，通知合并等... CompletableFuture利用Lambda表达式以声明式的API提供了一种机制，能够用最有效的方式，非常容易地将多个以同步或异步方式执行复杂操作的任务结合到一起。  使用CompletableFuture构建组合式异步应用 基本操作 public class Shop { private String shopName; public Shop(String shopName) { this.shopName = shopName; } public String getShopName() { return shopName; } public void setShopName(String shopName) { this.shopName = shopName; } /** * 实时价格查看：同步 * @param product * @return */ public Double getPrice(String product){ return calculatePrice(product); } /** * 实时价格查看：异步 * @param product * @return */ public Future&amp;lt;Double&amp;gt; getPriceAsync(String product){ CompletableFuture&amp;lt;Double&amp;gt; futurePrice = new CompletableFuture&amp;lt;&amp;gt;(); //在异步线程中进行计算 new Thread(()-&amp;gt;{ try { double price = calculatePrice(product); futurePrice.</description>
    </item>
    
    <item>
      <title>2017年度总结</title>
      <link>https://chinalhr.github.io/post/2017_summary/</link>
      <pubDate>Mon, 01 Jan 2018 12:47:02 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/2017_summary/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;2017总结&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://chinalhr.github.io/post/about/</link>
      <pubDate>Tue, 26 Dec 2017 19:54:40 +0800</pubDate>
      
      <guid>https://chinalhr.github.io/post/about/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;关于本博客&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
  </channel>
</rss>